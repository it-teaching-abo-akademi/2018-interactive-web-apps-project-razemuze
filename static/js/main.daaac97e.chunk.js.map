{"version":3,"sources":["logo.svg","components/PortfolioContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PortfolioContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","newStock","stockAmount","key","value","setState","defineProperty","addStock","idval","parseInt","updateInput","_this2","react_default","a","createElement","className","style","marginRight","JSON","parse","content","name","stocks","length","onClick","deleteItem","backgroundColor","map","item","id","amount","float","deleteStock","display","flexWrap","justifyContent","margin","type","placeholder","onChange","e","target","min","step","addStockOnClick","disabled","Component","App","newItem","list","count","myObj","slice","Math","random","stringify","toConsumableArray","push","tmpCount","updatedList","filter","listCopy","i","portfolioId","stockId","console","log","tmpIndex","index","splice","build_default","parent","addItem","components_PortfolioContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.daaac97e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\n\n// I think it would make sense to get data from local storage here\n// Then, i would need to run a loop in the render/return for amount of portfolios\n\nclass PortfolioContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newStock: \"\",\n            stockAmount: 0\n        };\n    }\n\n    updateInput(key, value) {\n        // update react state\n        this.setState({ [key]: value });\n    }\n\n    // A wrapper function for some extra features to run in the onclick when adding stocks to a portfolio\n    addStockOnClick() {\n        this.props.addStock(this.props.idval, this.state.newStock, parseInt(this.state.stockAmount, 10));\n        this.updateInput(\"newStock\", \"\");\n        this.updateInput(\"stockAmount\", 0);\n    }\n\n\n    render() {\n        return (\n            <div className=\"portfolioContainer\" key={this.props.idval}>\n\n                <span style={{marginRight: \"5%\"}}>{JSON.parse(this.props.content).name}</span>\n                <button style={{marginRight: \"5%\"}}>Show in €</button>\n                <button style={{marginRight: \"5%\"}}>Show in $</button>\n                {JSON.parse(this.props.content).stocks.length}/50 Stocks\n\n                <div className=\"closeButton\" onClick={() => this.props.deleteItem(this.props.idval)}>\n                    X\n                </div>\n\n                <div className=\"portfolioTable\">\n                    <div className=\"tableRow\" style={{backgroundColor: \"#eee\"}}>\n                        <div className=\"tableNameCol\">Name</div>\n                        <div className=\"tableAmountCol\">Amount</div>\n                    </div>\n\n                    {JSON.parse(this.props.content).stocks.map(item => {\n                        return (\n\n\n                            <div className=\"tableRow\" key={item.id}>\n                                <div className=\"tableNameCol\">{item.name}</div>\n                                <div className=\"tableAmountCol\">\n                                    {item.amount}\n                                    <button style={{float: \"right\"}} onClick={() => this.props.deleteStock(this.props.idval, item.id)}>\n                                        Remove\n                                    </button>\n                                </div>\n\n\n                            </div>\n                        );\n                    })}\n                </div>\n\n                <div className=\"portfolioTotal\">\n                    Total value of {JSON.parse(this.props.content).name}: ----\n                </div>\n\n                <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"flex-start\", margin: \"10px\"}}>\n                    <input\n                        type=\"text\"\n                        style={{marginRight: \"10px\"}}\n                        placeholder=\"Stock symbol\"\n                        value={this.state.newStock}\n                        onChange={e => this.updateInput(\"newStock\", e.target.value)}\n                    />\n                    <input\n                        type=\"number\"\n                        style={{marginRight: \"10px\"}}\n                        placeholder=\"Stock amount\"\n                        value={this.state.stockAmount}\n                        onChange={e => this.updateInput(\"stockAmount\", e.target.value)}\n                        min=\"1\"\n                        step=\"1\"\n                    />\n                    <button\n                        onClick={() => this.addStockOnClick()}\n                        disabled={(!this.state.newStock.length || this.state.stockAmount < 1 || JSON.parse(this.props.content).stocks.length > 49)}\n                    >\n                        &#43; Add\n                    </button>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default PortfolioContainer;","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport SimpleStorage from \"react-simple-storage\";\nimport PortfolioContainer from \"./components/PortfolioContainer\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newItem: \"\",\n            list: [],\n            count: 0,\n        };\n    }\n\n\n    updateInput(key, value) {\n        // update react state\n        this.setState({ [key]: value });\n    }\n\n\n    // This adds a portfolio\n    addItem() {\n        let myObj = {};\n        myObj[\"name\"] = this.state.newItem.slice();\n        myObj[\"stocks\"] = [];\n\n        // create a new item with unique id\n        const newItem = {\n            id: 1 + Math.random(),\n            value: JSON.stringify(myObj)\n        };\n\n        // copy current list of items\n        const list = [...this.state.list];\n\n        // add the new item to the list\n        list.push(newItem);\n\n        let tmpCount = this.state.count + 1;\n\n        // update state with new list, reset the new item input\n        this.setState({\n            list,\n            newItem: \"\",\n            count: tmpCount\n        });\n    }\n\n    // This deletes a portfolio\n    deleteItem(id) {\n        // copy current list of items\n        const list = [...this.state.list];\n        // filter out the item being deleted\n        const updatedList = list.filter(item => item.id !== id);\n        let tmpCount = this.state.count - 1;\n        this.setState({ list: updatedList, count: tmpCount });\n    }\n\n    // This adds stocks to a specific portfolio\n    addStock(id, name, amount) {\n        let listCopy = this.state.list.slice();\n        for (let i=0; i<listCopy.length; i++) {\n            if (id === listCopy[i].id) {\n                // Found portfolio\n\n                // Get old data\n                let content = JSON.parse(listCopy[i].value);\n\n                // add new data\n                content.stocks.push({id: 1 + Math.random(), \"name\": name, \"amount\": amount});\n                listCopy[i].value = JSON.stringify(content);\n                this.setState({list: listCopy});\n\n                break;\n            }\n        }\n    }\n\n    // This removes a specific stock from a specific portfolio\n    deleteStock(portfolioId, stockId) {\n        let listCopy = this.state.list.slice();\n        for (let i=0; i<listCopy.length; i++) {\n            if (portfolioId === listCopy[i].id) {\n                // Found portfolio\n                let content = JSON.parse(listCopy[i].value);\n\n                let stocks = content.stocks;\n\n                console.log(stocks);\n                console.log(typeof(stocks));\n\n                let tmpIndex = -1;\n\n                content.stocks.map((item, index) => {\n                    if (item.id === stockId) {\n                        console.log(index);\n                        tmpIndex = index;\n                    }\n                })\n\n                content.stocks.splice(tmpIndex, 1);\n                //listCopy[i].value = content;\n\n                //let updatedList = content.filter(item => item.id !== stockId);\n\n                listCopy[i].value = JSON.stringify(content);\n                this.setState({list: listCopy});\n\n                break;\n            }\n        }\n    }\n\n    render() {\n        //localStorage.clear();  // Can be uncommented in order to clear all stored data, useful for testing.\n        return (\n            <div className=\"App\">\n\n                <SimpleStorage parent={this} />\n\n                <header className=\"App-header\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Portfolio name\"\n                        value={this.state.newItem}\n                        onChange={e => this.updateInput(\"newItem\", e.target.value)}\n                    />\n                    <button\n                        onClick={() => this.addItem()}\n                        disabled={(!this.state.newItem.length || this.state.count > 9)}\n                    >\n                        Create portfolio\n                    </button>\n                    <br/>\n                    {this.state.count} / 10 Portfolios Created\n                </header>\n                <div className=\"portfolioArea\">\n\n                        {this.state.list.map(item => {\n                            return (\n                                <PortfolioContainer state={this.state} setState={p=>{this.setState(p)}} idval={item.id}\n                                                    content={item.value} deleteItem={this.deleteItem}\n                                                    addStock={this.addStock} deleteStock={this.deleteStock}/>\n\n                                /*\n                                <li key={item.id}>\n                                    {JSON.parse(item.value).name}\n                                    <button onClick={() => this.deleteItem(item.id)}>\n                                        Remove\n                                    </button>\n                                </li>*/\n                            );\n                        })}\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n\n/*import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PortfolioContainer from './components/PortfolioContainer.js';\nimport AddPortfolioModal from './components/AddPortfolioModal.js';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <AddPortfolioModal/>\n                </header>\n                <PortfolioContainer/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}